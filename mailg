#!/usr/bin/env sh
# shellcheck disable=SC1090
#
# Copyright (c) 2023 Justin Teague
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Prgnam='mailg'
Version='0.0.42'
Verbose=0
Config_File_Name="${Prgnam}.conf"
Config_Default_Locations="
$PWD/$Config_File_Name
$PWD/.$Config_File_Name
$HOME/.$Config_File_Name
${XDG_CONFIG_HOME:-$HOME/.config}/$Config_File_Name
/usr/local/etc/$Config_File_Name
/etc/$Config_File_Name
"
# Envioronment variables
MAILGUN_API_KEY="${MAILGUN_API_KEY:-}" 
MAILGUN_API_DOMAIN="${MAILGUN_API_DOMAIN:-}"
MAILGUN_API_URL="${MAILGUN_API_URL:-https://api.mailgun.net/v3}"
MAILGUN_FROM_ADDRESS="${MAILGUN_FROM_ADDRESS:-}"  # Optional
MAILGUN_FROM_NAME="${MAILGUN_FROM_NAME:-$NAME}"   # Optional

# Usage and Help
usage() {
  cat << EOF
$(clr bld)USAGE
$Prgnam [-Edvq] [-b $(clr rst ita)bcc$(clr rst bld)] [-c $(clr rst ita)cc$(clr rst bld)] [-r $(clr rst ita)address$(clr rst bld)] [-s $(clr rst ita)subject$(clr rst bld)] [-C $(clr rst ita)config$(clr rst bld)] $(clr rst ita)recipient$(clr rst)
EOF
}

version() {
  cat << EOF
$(clr bld)$Prgnam -- Version: $Version$(clr rst)
$(clr ita)Send mail via mailgun and curl from the command-line.$(clr rst)
EOF
}

help() {
  cat << EOF
$(version)

$(usage)

    $(clr bld)-d$(clr rst)    Debug mode.
    $(clr bld)-E$(clr rst)    Abort send if no message.
    $(clr bld)-h$(clr rst)    Show help message.
    $(clr bld)-q$(clr rst)    Quiet mode.
    $(clr bld)-v$(clr rst)    Verbose mode.
    $(clr bld)-V$(clr rst)    Show version.
    
    $(clr bld)-C$(clr rst)    Configuration file.
    $(clr bld)-F$(clr rst)    From name.
    $(clr bld)-f$(clr rst)    From address.
    $(clr bld)-r$(clr rst)    From address.
    $(clr bld)-s$(clr rst)    Subject.

$(clr bld)CONFIGURATION VARIABLES
    MAILGUN_API_KEY $(clr ita)(required)$(clr rst bld)
    MAILGUN_API_DOMAIN $(clr ita)(required)$(clr rst bld)
    MAILGUN_API_URL $(clr rst ita)(default: https://api.mailgun.net/v3)$(clr rst bld)
    MAILGUN_FROM_ADDRESS
    MAILGUN_FROM_NAME
$(clr rst)
$(clr bld)CONFIGURATION FILE LOCATIONS
    ./$Config_File_Name
    ./.$Config_File_Name
    \$HOME/.$Config_File_Name
    \$HOME/.config/$Config_File_Name
    /usr/local/etc/$Config_File_Name
    /etc/$Config_File_Name
$(clr rst)
EOF
}

# STDIN/STDOUT Functions
out() {
  printf %s\\n "$*"
}

err() {
  if [ "$Verbose" -ge 0 ]; then
    >&2 out "$(clr red bld)[$Prgnam] ERROR: $*$(clr rst)"
  fi
}

die() {
  err "$*"
  exit 1
}

warn() {
  if [ "$Verbose" -ge 1 ]; then
    >&2 out "$(clr ylw bld)[$Prgnam] WARN: $*$(clr rst)"
  fi
}

info() {
  if [ "$Verbose" -ge 1 ]; then
    >&2 out "$(clr bld)[$Prgnam]: $*$(clr rst)"
  fi
}

debug() {
  if [ "$Verbose" -ge 2 ]; then
    >&2 out "[$Prgnam] DEBUG: $*"
  fi
}

# Color codes function
clr() {
  # Receives: color / format
  # Returns: Prints ANSI cooe
  _pfx='\033['     # prefix
  _rst='m'         # reset
  _bld='1m'        # bold
  _fnt='2m'        # faint
  _ita='3m'        # italics
  _udl='4m'        # underline
  _blk=';30m'      # black
  _red=';31m'      # red
  _grn=';32m'      # green
  _ylw=';33m'      # yellow
  _blu=';34m'      # blue
  _pur=';34m'      # purple
  _cya=';36m'      # cyan
  _wht=';37m'      # white

  # Return nothing if not an interactive terminal
  if [ ! -t 0 ]; then
    return
  fi

  while [ "$#" -gt 0 ]; do
    case "$1" in
      rst) printf %b "${_pfx}${_rst}" ; shift ;;
      bld) printf %b "${_pfx}${_bld}" ; shift ;;
      fnt) printf %b "${_pfx}${_fnt}" ; shift ;;
      ita) printf %b "${_pfx}${_ita}" ; shift ;;
      udl) printf %b "${_pfx}${_udl}" ; shift ;;
      blk) printf %b "${_pfx}${_blk}" ; shift ;;
      red) printf %b "${_pfx}${_red}" ; shift ;;
      grn) printf %b "${_pfx}${_grn}" ; shift ;;
      ylw) printf %b "${_pfx}${_ylw}" ; shift ;;
      blu) printf %b "${_pfx}${_blu}" ; shift ;;
      pur) printf %b "${_pfx}${_pur}" ; shift ;;
      cya) printf %b "${_pfx}${_cya}" ; shift ;;
      wht) printf %b "${_pfx}${_wht}" ; shift ;;
        *) err "Unknown color: $1"    ; return 1 ;;
    esac
  done
}

append_array() {
  if [ -n "$2" ]; then
    out "$2"
  fi
  out "$1"
}

main() {
  subject=""
  from_addr=""
  from_name=""
  message=""
  attach=""
  from=""
  curl_bin=""
  no_msg_skip=""

  # Check for curl binary
  if ! curl_bin="$(command -v curl 2>&1)"; then
    die "curl not in path. Is it installed?"
  fi

  # Check for configuration file
  for _conf in $Config_Default_Locations; do
    if [ -r "$_conf" ]; then
      . "$_conf" || exit 1
    fi
  done

  while getopts ':dEhqvVa:C:F:f:r:s:' OPTION; do
    case "$OPTION" in
      d) Verbose=3 ;;
      E) no_msg_skip=1 ;;
      h) help ; return ;;
      q) Verbose=-1 ;;
      v) Verbose=1 ;;
      V) version; return ;;
      a) attach="$(append_array "$OPTARG" "$attach")" ;;
      C) . "$OPTARG" || exit 1 ;;
      F) from_name="$OPTARG" ;;
      f|r) from_addr="$OPTARG" ;;
      s) subject="$OPTARG" ;;
      *) usage ; exit 1 ;;
    esac
  done
  shift "$((OPTIND -1))"
  
  # Get message from stdin
  if [ -p /dev/stdin ] || [ -f /dev/stdin ]; then
    message="$(cat)"
  elif [ -t 0 ]; then
    printf '> '
    read -r message
  fi
  
  # Check from Environment variables
  if [ -z "$MAILGUN_API_KEY" ]; then
    die "MAILGUN_API_KEY unset."
  elif [ -z "$MAILGUN_API_DOMAIN" ]; then
    die "MAILGUN_API_DOMAIN unset."
  elif [ -z "$MAILGUN_API_URL" ]; then
    die "MAILGUN_API_URL unset."
  fi
  
  # Build "From" address
  if [ -z "${from_addr:=$MAILGUN_FROM_ADDRESS}" ]; then
    from_addr="${USER:-nobody}@$MAILGUN_API_DOMAIN"
  fi

  if [ -n "${from_name:=$MAILGUN_FROM_NAME}" ]; then
    from="$from_name <$from_addr>"
  else
    from="$from_addr"
  fi
  # Check for To: address
  if [ -z "$1" ]; then
    die "No recipient address."
  fi
  # Build recipient array
  count=0
  for _to in "$@"; do
    [ "$count" -eq 0 ] && set --; count=$((count +1))
    set -- "$@" -F "to=$_to"
  done

  # Append attachments to array
  if [ -n "$attach" ]; then
    for _file in $attach; do
      set -- "$@" -F "attachment=@$_file"
    done
  fi

  # Final variable check
  if [ -z "$subject" ]; then
    warn "No subject."
  fi
  if [ -z "$message" ]; then
    if [ "$no_msg_skip" -eq 1 ]; then
      info "No message, aborting send."
      return
    fi
    warn "No message set."
  fi

  debug "MAILGUN_API_KEY=$MAILGUN_API_KEY"
  debug "MAILGUN_API_URL=$MAILGUN_API_URL"
  debug "Verbose=$Verbose"
  debug "attach=$attach"
  debug "subject=$subject"
  debug "from_addr=$from_addr"
  debug "from_name=$from_name"
  debug "from=$from"
  debug "recipients=$*"
  debug "message=$message"
  debug "curl_bin=$curl_bin"

  # Post message
  _res=$(mktemp 2>&1) || die "$_res"    # temp file to cleanup later
  if ! _ret=$("$curl_bin" -sS \
    -w "%{http_code}\n" \
    -o "$_res" \
    --user "api:$MAILGUN_API_KEY" \
    "$MAILGUN_API_URL/$MAILGUN_API_DOMAIN/messages" \
    -F "subject=$subject" \
    -F "text=$message" \
    -F "from=$from" \
    "$@" 2>&1); then
    err "curl error: $_res"
    return 1
  fi

  info "curl response: $(cat "$_res")"
  rm "$_res"                          # cleanup temp file

  if [ "$_ret" -ge 400 ]; then
    err "HTTP error code: $_ret"
    return 1
  fi
}

main "$@"
